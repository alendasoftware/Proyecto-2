<?php

//Constante
define('miConstante', 'valor');

//Variables
$miVar = 'Cadena';

//Imprimir por pantalla
echo $miVar;

//Asignación 
$var = 'code'; 
$var .= 'hero'; // $var será codehero

//Condicional
if ($variable < 2)
{}else{}

//Case
switch ($variable)
{
     case "constante1" :
      	//Codigo PHP
	break;	
     default :
      	//Codigo PHP
	break;
}

//For
$j = 10;
for ($i=0; $i<10; $i++)
{
      $j += $j;
}

//While
$variable = 0;
$j = 10;

while ($variable < 100 )
{
      $variable = $variable + $j;
}

//Función por referencia
function sumarNumeros ($parametro1, $parametro2) //Por referencia no cambia el valor de las variables que se le pasan
{
     return $parametro1 + $parametro2;
    // En esta función podemos observar como se reciben dos parámetros para luego sumarlos
    // y devolver el resultado .
}

//Función por valor
function sumarNumeros (&$parametro1, &$parametro2) //Por valor cambia el valor de las variables que se le pasan
{
     return $parametro1 + $parametro2;
    // En esta función podemos observar como se reciben dos parámetros para luego sumarlos
    // y devolver el resultado .
}


//Array
$arrMiArray = array();
// creación de arreglo vacío

$arrMiArray = array('php', 'python', 'ruby', 'java');
// creación de arreglo con parámetros.

echo $arrMiArray[1];

$persona = array('nombre'=>'Juan', 'apellido'=>'valdez', 'direccion'=>'calle 1', 'nacionalidad'=>'venezuela');
echo $persona['apellido'];

//Request querystring
http://localhost/pagina.php?categoria=ropa&producto=3
$categoria = $_GET['categoria'];
$producto = $_GET['producto'];

//Resquest form
Form-->
$usuario = $_POST['usuario'];

//Cookie
setcookie('nombreUsuario', 'Pedro', time() + 4800);
if (isset($_COOKIE['nombreUsuario'])){
    echo 'Valor de la Cookie '. $_COOKIE['nombreUsuario'];
}else{
    echo 'No hay Cookies';
}
setCookie('nombreUsuario', '', time() - 1000);

//Variables de session
session_start();

$_SESSION['nombre'] = 'Pedro';
$_SESSION['apellido'] = 'Garcia';

if (isset($_SESSION['nombre'])){
    echo $_SESSION['nombre'];
}else{
    echo 'No existe nombre en $_SESSION';
}

//MySql
Con TABLA
CREATE TABLE lenguajes (lenguaje varchar 255);

//Avrir Conexión
$db = new mysqli('localhost', 'usuario', 'clave', 'nombre_base_datos');
// El primer parámetro es el host en donde se encuentra la base de datos
// El segundo parámetro es el usuario con el que se desea conectar
// El tercer parámetro es la clave del usuario
// El cuarto es la base de datos que se desea utilizar


// Por ultimo se debe revisar si la conexión se realizo sin ningún problema
// para esto se hace uso de la propiedad 'connect_errno' sobre el objeto
// de la conexión a la base de datos
if($db->connect_errno > 0){
    die('Imposible conectar [' . $db->connect_error . ']');
    // Si se consiguió algún error entonces se muestra cual fue
}else{
    echo 'Conectado';
    // Si no se consigue algún error entonces la conexión se realizo correctamente
}

$db = new mysqli('localhost', 'usuario', 'clave', 'nombre_base_datos');
if($db->connect_errno > 0){
    die('Imposible conectar [' . $db->connect_error . ']');
}

//Select
$sql = "SELECT lenguaje FROM lenguajes";

if(!$resultado = $db->query($sql)){
    die('Ocurrio un error ejecutando el query [' . $db->error . ']');
}

//Recorreo recordset
while($fila = $resultado->fetch_assoc()){

    // $fila es un arreglo asociativo con todos los campos que se pusieron en el select

    echo $fila['lenguaje'] . '<br />';
}

//numero de registros
echo 'Cantidad de filas: ' . $resultado->num_rows;

//Insert sql
$sql = "INSERT INTO lenguajes (id, lenguaje, descripcion) VALUES(NULL, 'C++', 'Sin Descripcion')";

if(! $db->query($sql)){
     die('Ocurrio un error ejecutando el query [' . $db->error . ']');
}

echo 'Filas Insertadas: '.$db->affected_rows;

$enlace = mysql_connect('localhost', 'usuario_mysql', 'contraseña_mysql');
if (!$enlace) {
    die('No se pudo conectar: ' . mysql_error());
}
mysql_select_db('mibd');

mysql_query("INSERT INTO mitabla (producto) values ('kossu')");
printf("El último registro insertado tiene el id %d\n", mysql_insert_id());

//Updte sql
$sql = "UPDATE lenguajes SET  descripcion =  'Lenguaje C++' WHERE  id =5;";
if(! $db->query($sql) ){
     die('Ocurrio un error ejecutando el query [' . $db->error . ']');
}

echo 'Filas Modificadas: '.$db->affected_rows;

//Delete sql
$sql = "DELETE FROM lenguajes WHERE  id = 5;";
if(! $db->query($sql) ){
     die('Ocurrio un error ejecutando el query [' . $db->error . ']');
}

echo 'Filas Eliminadas: '.$db->affected_rows;

//Cerrar conexión
$db->close();

//Archivo de Conexión
<?php

// archivo conexión.php

$db = new mysqli('localhost', 'usuario', 'clave', 'nombre_base_datos');
if($db->connect_errno > 0){
    die('Imposible conectar [' . $db->connect_error . ']');
}

?>

//Require o Include --> incluir archivo
<?php

// archivo index.php

require 'conexión.php';
// esta función simplemente toma el contenido de conexion.php y lo coloca en esta posición
// al final el interprete de php usara el código completo
// pero para nosotros esta separado y organizado

o

include 'conexión.php';
// Cuando utilizamos include, PHP intenta cargar el archivo solicitado, pero si no lo logra encontrar entonces muestra un error de tipo warning. Esto significa que algo salió mal durante el código pero la ejecución del mismo continua. 

?>

// Clases
<?
class Carro {

    var $color;
    var $numero_puertas;
    var $marca;
    var $gasolina = 0;

    function llenarTanque($gasolina_nueva){
        $this->gasolina = $this->gasolina + $gasolina_nueva;
    }

    function acelerar(){
        if ($this->gasolina > 0){
            $this->gasolina = $this->gasolina - 1;
            return 'Gasolina restante: '.$this->gasolina;
        }
    }
}

$carro = new Carro(); // Instanciamos la clase Carro
$carro->color = 'Rojo'; // Llenamos algunas de las propiedades
$carro->marca = 'Honda';
$carro->numero_puertas = 4;
$carro->llenarTanque(10); // utilizamos los metodos
$carro->acelerar();
$carro->acelerar();
$carro->acelerar();

//Constructor
class calculadoraEuro{

    public $dolar_euro;

    // el constructor tiene que ser un metodo publico
    public function __construct(){
        $this->dolar_euro = 0.74;
        echo 'El valor del euro es: '. $this->dolar_euro;
    }

    public function dolaresEuros( $dolares){
        return $dolares.' dolares son '. ($dolares * $this->dolar_euro) .' euros';  
    }
}

$calculadora = new calculadoraEuro();
echo $calculadora->dolaresEuros(5);

// Public
class prueba{

    public $abc = 'Variable publica';
    public function xyz(){
        echo 'Funcion publica';
    }
}

$objA = new prueba();
echo $objA->abc;//variable accesible desde todos lados
$objA->xyz();//metodo accesible desde todos lados

// Private
Class prueba {

    public $abc = 'variable publica';
    private $xyz = 'variable privada';

    public function pubDo($a){
        echo $a;
    }

    private function privDo($b){
        echo $b;
    }

    public function pubPrivDo(){
        $this->xyz = 'utilizando la variable privada desde adentro de la clase ';
        $this->privDo('llamando a la función privada desde adentro de la clase');
    }
}

// Protected --> Herencia
class pruebaPadre
{
    protected function funcionProtegida(){
        echo 'llamando al a funcion protegida del padre';
    }

}

class pruebaHijo extends pruebaPadre{

    public function funcionPublica (){
        $this->funcionProtegida();
    }
}

$objPadre = new pruebaPadre();

// este llamado a la funcion dara error,
// ya que esta funcion protegia solo se puede llamar
// desde adentro de la clase
$objPadre->funcionProtegida();

$objHijo = new pruebaHijo();

// esta funcion publica llama a la funcion protegida de
// la clase padre y no dara error porque el llamado
// a la funcion protegia se hace desde adentro de la clase
$objHijo->funcionPublica();

?>

// Ejemplo de herencia
<?php
class Vehiculo{

    public $matricula;
    private $color;
    protected $encendido;

    public function encender(){
        $this->encendido = true;
        echo 'Vehiculo encendido <br />';
    }

    public function apagar(){
        $this->encendido = false;
        echo 'Vehiculo apagado <br />';
    }
}

class Camion extends Vehiculo{

    private $carga;

    public function cargar($cantidad_a_cargar){
        $this->carga = $cantidad_a_cargar;
        echo 'Se ha cargado cantidad: '. $cantidad_a_cargar. ' <br />';
    }

    public function verificar_encendido(){
        if ($encendido == true){
            echo 'Camion encendido <br />';
        }else{
            echo 'Camion apagado <br />';
        }
    }
}

class Autobus extends Vehiculo{

    private $pasajeros;

    public function subir_pasajeros($cantidad_pasajeros){
        $this->pasajeros = $cantidad_pasajeros;
        echo 'Se han subido '.$cantidad_pasajeros.' pasajeros <br />';
    }

    public function verificar_encendido(){
        if ($encendido == true){
            echo 'Autobus encendido <br />';
        }else{
            echo 'Autobus apagado <br />';
        }
    }
}


$camion = new Camion();
$camion->encender();
// encender() es un metodo de la clase padre
// pero al ser un metodo publico es herado por la clase hijo
// en este caso Camion y por lo tanto puede ser llamado desde un
// objeto de Camion
$camion->cargar(10);
$camion->verificar_encendido();
$camion->matricula = 'MDU - 293';
// Lo mimsmo que ocurre con el metodo encender() se
// aplica para la propiedad de matricula y el metodo
// apagar. Son metodos y propiedades publicas
// por lo tanto el hijo las hereda sin ningun problema o limitacion
$camion->apagar();

$autobus = new Autobus();
$autobus->encender();
$autobus->subir_pasajeros(5);
$autobus->verificar_encendido();
$autobus->matricula = 'KDF - 923';
$autobus->apagar();

// Este codigo deberia imprimir la siguiente salida

/*
Vehiculo encendido
Se ha cargado cantidad: 10
Camion apagado
Vehi­culo apagado
Vehiculo encendido
Se han subido 5 pasajeros
Autobus apagado
Vehiculo apagado
*/

// Using __get and __set
class MyClass {
    private $firstField;
    private $secondField;

    public function __get($property) {
            if (property_exists($this, $property)) {
                return $this->$property;
            }
    }

    public function __set($property, $value) {
        if (property_exists($this, $property)) {
            $this->$property = $value;
        }
    }
}

$myClass = new MyClass();

$myClass->firstField = "This is a foo line";
$myClass->secondField = "This is a bar line";

echo $myClass->firstField;
echo $myClass->secondField;

/* Output:
    This is a foo line
    This is a bar line
 */

?>

// Email
<?php
// multiple recipients
$to  = 'aidan@example.com' . ', '; // note the comma
$to .= 'wez@example.com';

// subject
$subject = 'Birthday Reminders for August';

// message
$message = '<html><head><title>Birthday Reminders for August</title></head><body></body></html>';

// To send HTML mail, the Content-type header must be set
$headers  = 'MIME-Version: 1.0' . "\r\n";
$headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";

// Additional headers
$headers .= 'To: Mary <mary@example.com>, Kelly <kelly@example.com>' . "\r\n";
$headers .= 'From: Birthday Reminder <birthday@example.com>' . "\r\n";
$headers .= 'Cc: birthdayarchive@example.com' . "\r\n";
$headers .= 'Bcc: birthdaycheck@example.com' . "\r\n";

// Mail it
mail($to, $subject, $message, $headers);
?>

echo $_SERVER['SERVER_NAME'];
